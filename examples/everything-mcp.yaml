# Everything MCP Service Example
# STDIO-based MCP service demonstrating universal adapter deployment
#
# IMPORTANT: Update the namespace and workspace ID to match your workspace:
# - namespace: Set to your workspace namespace (e.g., ws-myworkspace-uuid)
# - mcp.nimbletools.dev/workspace: Set to your workspace UUID
#
# Usage:
#   1. Update namespace and workspace ID below
#   2. kubectl apply -f everything-mcp.yaml
#   3. kubectl get mcpservices
#   4. kubectl logs -l app=everything -f  # Monitor npm package installation

apiVersion: mcp.nimbletools.dev/v1
kind: MCPService
metadata:
  name: everything
  namespace: YOUR_WORKSPACE_ID # UPDATE THIS: Use your workspace namespace (ws-name-uuid)
  labels:
    mcp.nimbletools.dev/service: "true"
    mcp.nimbletools.dev/workspace: "YOUR_WORKSPACE_ID" # UPDATE THIS: Your workspace UUID
  annotations:
    mcp.nimbletools.dev/description: "Everything MCP test server"
    mcp.nimbletools.dev/version: "1.0.0"
spec:
  # Basic configuration
  replicas: 1
  timeout: 300
  environment: {}

  # Container - ALWAYS use universal-adapter for stdio servers
  container:
    image: "nimbletools/universal-adapter:latest"
    registry: "docker.io"
    port: 8000

  # Deployment configuration - stdio with npm package installation
  deployment:
    type: "stdio"
    healthPath: "/health"
    stdio:
      executable: "npx"
      args: ["-y", "@modelcontextprotocol/server-everything"]
      workingDir: "/tmp"

  credentials: []

  # Resource limits
  resources:
    requests:
      cpu: "50m"
      memory: "128Mi"
    limits:
      cpu: "200m"
      memory: "256Mi"

  # Auto-scaling configuration
  scaling:
    minReplicas: 0
    maxReplicas: 10
    targetConcurrency: 10
    scaleDownDelay: "5m"

  # Routing configuration
  routing:
    path: "/services/everything"
    port: 8000
    healthPath: "/health"
    discoveryPath: "/mcp/discover"
