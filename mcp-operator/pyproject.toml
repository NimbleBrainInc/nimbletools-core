[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "nimbletools-core-operator"
requires-python = ">=3.13"

dependencies = [
    "kopf>=1.38.0",
    "kubernetes>=33.1.0",
    "PyYAML>=6.0.2",
]
dynamic = ["version"]

[dependency-groups]
dev = [
    "coverage>=7.10.5",
    "httpx>=0.28.1",
    "mypy>=1.17.1",
    "pylint",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.10",
    "types-pyyaml>=6.0.12.20250822",
]

[tool.hatch.version]
source = "vcs"
fallback-version = "0.1.0"

[tool.hatch.build.targets.wheel]
packages = ["src/nimbletools_core_operator"]


[tool.ruff]
line-length = 100
target-version = "py311"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings  
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PL",   # pylint
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by formatter
    "B008",   # do not perform function calls in argument defaults
    "PLR0913", # too many arguments to function call
    "PLR2004", # magic value used in comparison
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "ARG", "SIM"]

[tool.ruff.lint.isort]
known-first-party = ["nimbletools_core_operator"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
ignore_missing_imports = false
mypy_path = "src"
packages = ["nimbletools_core_operator"]
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    "kopf.*",
    "kubernetes.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-config",
    "--strict-markers",
    "--cov=nimbletools_core_operator",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=48",
]
testpaths = ["tests"]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["nimbletools_core_operator"]
branch = true
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

